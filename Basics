Basic SELECT statements:

1. SELECT * FROM rental;
2. SELECT * FROM customer;
3. SELECT first_name, last_name FROM customer;
4. SELECT rental_id, customer_id, staff_id FROM rental;

LIMIT is used to limit the number of rows being returned by the query and it is always written in the end
1. SELECT * FROM rental LIMIT 5;
2. SELECT rental_id, customer_id, staff_id FROM rental LIMIT 8;

COUNT is used to count the number of rows returned by the query for each column
1. SELECT COUNT(*) FROM rental;
2.SELECT COUNT(rental_id), COUNT(customer_id), COUNT(staff_id) FROM rental;

DISTINCT function is used to display the unique values for each column.
1. SELECT DISTINCT * FROM rental;
2. SELECT DISTINCT * FROM customer;
3. SELECT COUNT( DISTINCT rental_id), COUNT(DISTINCT customer_id), COUNT(DISTINCT staff_id) FROM rental;
4. SELECT COUNT (DISTINCT first_name), COUNT(DISTINCT last_name) FROM customer;

Comparison or relational operators and WHERE:

1. SELECT first_name, last_name FROM customer WHERE customer_id >=20 and customer_id <=30;
2. SELECT first_name, last_name FROM customer WHERE (customer_id >=20 AND customer_id <=30) AND store_id <= 10;
3. SELECT COUNT (*) FROM payment WHERE payment_id > 18000 OR amount<1.0;
4. SELECT * FROM payment WHERE payment_id > 18000 AND staff_id != 2;
5. SELECT * FROM payment WHERE payment_id > 18000 AND staff_id = 2;

BETWEEN: Used to select all rows whose value falls in between the given two values
1. SELECT * FROM rental WHERE customer_id BETWEEN 400 AND 401;
2. SELECT * FROM rental WHERE customer_id NOT BETWEEN 400 AND 451;

In: Used to select all rows whose value is present in the list of values specified
1. SELECT * FROM rental WHERE staff_id NOT IN (1);
2. SELECT * FROM rental WHERE staff_id IN (1);
3.SELECT * FROM rental WHERE staff_id IN (1,2);
4. SELECT * FROM rental WHERE staff_id NOT IN (1,2);

ORDER BY: Used to order the rows selected in ascending or descending order. When multiple order by is used, the first order by is done and then the second one during comparison of column values.

1. SELECT first_name, last_name FROM customer ORDER BY first_name;
2. SELECT first_name, last_name FROM customer ORDER BY first_name ASC;
3. SELECT first_name, last_name FROM customer ORDER BY first_name DESC;
3. SELECT first_name, last_name FROM customer ORDER BY first_name ASC, last_name DESC; #check the name Kelly which is occuring twice and see how first_name and last_name is ordered. 
4. SELECT first_name, last_name FROM customer WHERE (customer_id >=20 AND customer_id <=30) AND store_id <= 10 ORDER BY first_name ASC, last_name DESC;
5. SELECT first_name, last_name FROM customer WHERE (customer_id >=20 AND customer_id <=30) AND store_id <= 10 ORDER BY first_name ASC;

LIKE: Used to select rows whose column value matches a pattern.
ILIKE is case insensitive
_ : used to match single letter
%: match zero or more letters

1. SELECT first_name, last_name FROM customer WHERE first_name LIKE 'Kel%' ORDER BY first_name DESC;
2. SELECT * FROM customer WHERE first_name LIKE 'Jen%';
3. SELECT * FROM customer WHERE first_name LIKE 'Jen%' OR last_name LIKE '%To%';
4. SELECT * FROM customer WHERE first_name ILIKE 'cl%';
5.SELECT * FROM customer WHERE first_name LIKE '_en%';